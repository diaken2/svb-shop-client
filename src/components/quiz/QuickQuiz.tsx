"use client";
import React, { useMemo, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { useRouter } from "next/navigation";

type Answer = string;

interface QuickQuizProps {
  title?: string;
  telemetryLabel?: string;
  className?: string;
}

export default function QuickQuiz({
  title = "üéØ –ü–æ–¥–±–µ—Ä–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—É—é –ø—Ä–∏—Å—Ç–∞–≤–∫—É –∑–∞ 30 —Å–µ–∫—É–Ω–¥",
  telemetryLabel = "quiz_submit",
  className = "",
}: QuickQuizProps) {
  const router = useRouter();
  const steps = useMemo(
    () => [
      {
        q: "üì∫ –ö–∞–∫–æ–π —É –≤–∞—Å —Ç–µ–ª–µ–≤–∏–∑–æ—Ä?",
        description: "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å",
        options: [
          { text: "Smart TV", icon: "üì±", desc: "–£–∂–µ —É–º–Ω—ã–π, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ" },
          { text: "–û–±—ã—á–Ω—ã–π –¢–í", icon: "üì∫", desc: "–°—Ç–∞–Ω–µ—Ç —É–º–Ω—ã–º –∑–∞ 2 –º–∏–Ω—É—Ç—ã" },
          { text: "–ù–µ –∑–Ω–∞—é", icon: "‚ùì", desc: "–ü–æ–º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å" }
        ],
        key: "tvType",
      },
      {
        q: "üé¨ –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å?",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±—É–¥–µ—Ç –±–æ–Ω—É—Å–æ–º",
        options: [
          { text: "–¢–í –∫–∞–Ω–∞–ª—ã", icon: "üì°", desc: "3000+ –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –∞–±–æ–Ω–ø–ª–∞—Ç—ã" },
          { text: "YouTube", icon: "üî¥", desc: "–ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" },
          { text: "–§–∏–ª—å–º—ã/—Å–µ—Ä–∏–∞–ª—ã", icon: "üé≠", desc: "5+ –æ–Ω–ª–∞–π–Ω-–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–æ–≤" },
          { text: "–í—Å—ë —Å—Ä–∞–∑—É", icon: "‚≠ê", desc: "–ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π" }
        ],
        key: "usage",
      },
      {
        q: "üí∞ –ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç?",
        description: "–£ –Ω–∞—Å –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ª—é–±–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞",
        options: [
          { text: "–î–æ 2000‚ÇΩ", icon: "üí∏", desc: "–ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ" },
          { text: "2000-5000‚ÇΩ", icon: "üíé", desc: "–ü—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, 4K –ø–æ–¥–¥–µ—Ä–∂–∫–∞" },
          { text: "5000+‚ÇΩ", icon: "üöÄ", desc: "–ú–∞–∫—Å–∏–º—É–º —Ñ—É–Ω–∫—Ü–∏–π, –∏–≥—Ä–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞" }
        ],
        key: "budget",
      },
    ],
    []
  );

  const [current, setCurrent] = useState(0);
  const [answers, setAnswers] = useState<Record<string, Answer>>({});
  const [phone, setPhone] = useState("+7");
  const [isSending, setIsSending] = useState(false);
  const [isSent, setIsSent] = useState(false);
  const [error, setError] = useState("");

  const handleSelect = (option: any) => {
    const key = steps[current].key;
    setAnswers((prev) => ({ ...prev, [key]: option.text }));
    setTimeout(() => setCurrent((c) => Math.min(c + 1, steps.length)), 300);
  };

  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    let value = e.target.value;
    if (!value.startsWith("+7")) {
      value = "+7" + value.replace(/[^0-9]/g, "");
    }
    if (value.length <= 16) setPhone(value);
  };

  const handleSubmit = async () => {
    setError("");
    if (phone.replace(/\D/g, "").length < 11) {
      setError("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
      return;
    }
    setIsSending(true);
    try {
      const text = [
        `üéØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (—Ñ–æ—Ä–º–∞: –ö–≤–∏–∑ ‚Äî –ü–æ–¥–±–æ—Ä –ø—Ä–∏—Å—Ç–∞–≤–∫–∏)`,
        `üì∫ –¢–í: ${answers.tvType || "-"}`,
        `üé¨ –¶–µ–ª—å: ${answers.usage || "-"}`,
        `üí∞ –ë—é–¥–∂–µ—Ç: ${answers.budget || "-"}`,
        `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`,
      ].join("\n");

      const res = await fetch("/api/telegram", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text, type: "question" }),
      });

      if (res.ok) {
        setIsSent(true);
        setTimeout(() => setIsSent(false), 3000);
        setPhone("+7");
        setAnswers({});
        setCurrent(0);
        if (typeof window !== "undefined" && (window as any).ym) {
          (window as any).ym(103576778, "reachGoal", telemetryLabel);
        }
        // —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        setTimeout(() => router.push("/complete"), 500);
      } else {
        try {
          const data = await res.json();
          setError(data?.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        } catch {
          setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
      }
    } catch (e) {
      setError("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    } finally {
      setIsSending(false);
    }
  };

  const isLast = current >= steps.length;

  return (
    <motion.aside
      initial={{ opacity: 0, y: 30 }}
      whileInView={{ opacity: 1, y: 0 }}
      viewport={{ once: true }}
      transition={{ duration: 0.4 }}
      className={className}
    >
      <Card className="shadow-xl border border-gray-100 ring-1 ring-black/5 sticky top-4 rounded-3xl">
        <CardHeader className="text-center">
          <CardTitle className="text-xl md:text-2xl mb-2">{title}</CardTitle>
          <p className="text-gray-600 text-sm">
            üéÅ –ó–∞–ø–æ–ª–Ω–∏–≤ —Ç–µ—Å—Ç, –≤—ã —Å—ç–∫–æ–Ω–æ–º–∏—Ç–µ –≤—Ä–µ–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ ‚Äî –ø–æ—ç—Ç–æ–º—É –º—ã –¥–∞–¥–∏–º –≤–∞–º —Å–∫–∏–¥–∫—É 20%
          </p>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <AnimatePresence mode="popLayout">
              {!isLast ? (
                <motion.div
                  key={`q-${current}`}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -10 }}
                  transition={{ duration: 0.25 }}
                >
                  <div className="mb-4">
                    <p className="font-semibold text-lg mb-2">{steps[current].q}</p>
                    {steps[current].description && (
                      <p className="text-gray-600 text-sm mb-4">{steps[current].description}</p>
                    )}
                  </div>
                  <div className="space-y-3">
                    {steps[current].options.map((option, index) => (
                      <motion.button
                        key={option.text}
                        onClick={() => handleSelect(option)}
                        className="w-full p-4 text-left border-2 border-gray-200 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-all duration-200 group"
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                      >
                        <div className="flex items-center space-x-3">
                          <span className="text-2xl">{option.icon}</span>
                          <div className="flex-1">
                            <div className="font-semibold text-gray-900 group-hover:text-blue-700">
                              {option.text}
                            </div>
                            <div className="text-sm text-gray-600 group-hover:text-blue-600">
                              {option.desc}
                            </div>
                          </div>
                        </div>
                      </motion.button>
                    ))}
                  </div>
                </motion.div>
              ) : (
                <motion.div
                  key="phone"
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -10 }}
                  transition={{ duration: 0.25 }}
                >
                  <div className="text-center mb-4">
                    <div className="text-4xl mb-3">üéâ</div>
                    <p className="font-semibold text-lg mb-2">
                      –û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥
                    </p>
                    <p className="text-gray-600 text-sm">
                      –£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω ‚Äî –≤—ã—à–ª–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É, —Ü–µ–Ω—É –∏ —Å–∫–∏–¥–∫—É 20%
                    </p>
                  </div>
                  <div className="flex flex-col sm:flex-row gap-2">
                    <Input
                      type="tel"
                      value={phone}
                      onChange={handlePhoneChange}
                      placeholder="–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω"
                      aria-label="–¢–µ–ª–µ—Ñ–æ–Ω"
                      className="rounded-lg bg-white text-gray-900 placeholder:text-gray-500 border border-gray-300"
                    />
                    <Button className="rounded-xl bg-gradient-to-r from-green-500 to-emerald-600 text-white hover:brightness-110 shadow-lg hover:shadow-xl text-base font-semibold" onClick={handleSubmit} disabled={isSending}>
                      {isSending ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–±–æ—Ä + —Å–∫–∏–¥–∫—É 20%"}
                    </Button>
                  </div>
                  {error && (
                    <p className="text-red-600 text-sm mt-2">{error}</p>
                  )}
                  {isSent && (
                    <p className="text-green-600 text-sm mt-2">
                      –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!
                    </p>
                  )}
                </motion.div>
              )}
            </AnimatePresence>

            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
            <div className="mt-6">
              <div className="flex justify-between text-xs text-gray-500 mb-2">
                <span>–®–∞–≥ {Math.min(current + 1, steps.length + 1)} –∏–∑ {steps.length + 1}</span>
                {!isLast && (
                  <button
                    className="underline underline-offset-2 hover:text-gray-700"
                    onClick={() => setCurrent((c) => Math.min(c + 1, steps.length))}
                  >
                    –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                  </button>
                )}
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <motion.div
                  className="bg-gradient-to-r from-blue-500 to-purple-600 h-2 rounded-full"
                  initial={{ width: 0 }}
                  animate={{ width: `${((current + 1) / (steps.length + 1)) * 100}%` }}
                  transition={{ duration: 0.3 }}
                />
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </motion.aside>
  );
}



